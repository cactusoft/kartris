<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PdfSharp.Quality</name>
    </assembly>
    <members>
        <member name="T:PdfSharp.Quality.AssetsHelper">
            <summary>
            Static helper functions for fonts.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.AssetsHelper.GetAssetsFolder(System.String)">
            <summary>
            Gets the assets folder or null, if no such folder exists.
            </summary>
            <param name="path">The path or null, if the function should use the current folder.</param>
        </member>
        <member name="M:PdfSharp.Quality.AssetsHelper.EnsureAssets(System.String)">
            <summary>
            Checks whether the assets folder exists and throws an exception if not.
            </summary>
            <param name="path">The path or null, if the function should use the current folder.</param>
        </member>
        <member name="T:PdfSharp.Quality.DefaultFontResolver_unused">
            <summary>
            
            </summary>
            <seealso cref="T:PdfSharp.Fonts.IFontResolver" />
        </member>
        <member name="M:PdfSharp.Quality.DefaultFontResolver_unused.ResolveTypeface(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts specified information about a required typeface into a specific font.
            </summary>
            <param name="familyName">Name of the font family.</param>
            <param name="isBold">Set to <c>true</c> when a bold font face is required.</param>
            <param name="isItalic">Set to <c>true</c> when an italic font face is required.</param>
            <returns>
            Information about the physical font, or null if the request cannot be satisfied.
            </returns>
        </member>
        <member name="M:PdfSharp.Quality.DefaultFontResolver_unused.GetFont(System.String)">
            <summary>
            Gets the bytes of a physical font with specified face name.
            </summary>
            <param name="faceName">A face name previously retrieved by ResolveTypeface.</param>
        </member>
        <member name="T:PdfSharp.Quality.Feature">
            <summary>
            Base class for features.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Feature.RenderSnippetAsPdf(PdfSharp.Quality.Snippet)">
            <summary>
            Renders a code snippet to PDF.
            </summary>
            <param name="snippet">A code snippet.</param>
        </member>
        <member name="M:PdfSharp.Quality.Feature.RenderSnippetAsPdf(PdfSharp.Quality.Snippet,PdfSharp.Drawing.XUnit,PdfSharp.Drawing.XUnit,PdfSharp.Drawing.XGraphicsUnit,PdfSharp.Drawing.XPageDirection)">
            <summary>
            Renders a code snippet to PDF.
            </summary>
            <param name="snippet"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="graphicsUnit"></param>
            <param name="pageDirection"></param>
        </member>
        <member name="M:PdfSharp.Quality.Feature.RenderAllSnippets">
            <summary>
            Renders all code snippets to PDF.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Feature.CreateNewPdfDocument">
            <summary>
            Creates a PDF test document.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Feature.SaveToStreamOrSaveToFile(PdfSharp.Pdf.PdfDocument,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Saves a PDF document to stream or save to file.
            </summary>
            <param name="document">The document.</param>
            <param name="stream">The stream.</param>
            <param name="filenameTag">The filename tag.</param>
            <param name="show">if set to <c>true</c> [show].</param>
        </member>
        <member name="M:PdfSharp.Quality.Feature.SaveAndShowDocument(PdfSharp.Pdf.PdfDocument,System.String)">
            <summary>
            Saves a PDF document and show it document.
            </summary>
            <param name="document">The document.</param>
            <param name="filenameTag">The filename tag.</param>
        </member>
        <member name="M:PdfSharp.Quality.Feature.SaveDocument(PdfSharp.Pdf.PdfDocument,System.String)">
            <summary>
            Saves a PDF document into a file.
            </summary>
            <param name="document">The PDF document.</param>
            <param name="filenameTag">The tag of the PDF file.</param>
        </member>
        <member name="M:PdfSharp.Quality.Feature.ReadWritePdfDocument(System.String,PdfSharp.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Reads and writes a PDF document.
            </summary>
            <param name="filename">The PDF file to read.</param>
            <param name="passwordProvider">The password provider if the file is protected.</param>
        </member>
        <member name="T:PdfSharp.Quality.FeatureAndSnippetBase">
            <summary>
            Base class with common code for both features and snippets.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSharp.Quality.FeatureAndSnippetBase"/> class.
            </summary>
        </member>
        <member name="T:PdfSharp.Quality.FeatureAndSnippetBase.BoxOptions">
            <summary>
            Specifies how to draw a box on the PDF page.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.BoxOptions.None">
            <summary>
            Draw no box.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.BoxOptions.Box">
            <summary>
            Draw a box.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.BoxOptions.DrawX">
            <summary>
            Draw 
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.BoxOptions.Fill">
            <summary>
            Draw 
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.BoxOptions.Tile">
            <summary>
            Draw 
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.WidthInPoint">
            <summary>
            The width of the PDF page in point.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.HeightInPoint">
            <summary>
            The height of the PDF page in point.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.WidthInMillimeter">
            <summary>
            The width of the PDF page in millimeter.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.HeightInMillimeter">
            <summary>
            The height of the PDF page in millimeter.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.WidthInPU">
            <summary>
            The width of the PDF page in presentation units.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.HeightInPU">
            <summary>
            The width of the PDF page in presentation units.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.BoxWidth">
            <summary>
            The width of the drawing box in presentation units.
            </summary>
        </member>
        <member name="F:PdfSharp.Quality.FeatureAndSnippetBase.BoxHeight">
            <summary>
            The height of the drawing box in presentation units.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.BoxCenter">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.Gray">
            <summary>
            Gets the gray background brush for boxes.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.PdfSharpTechnology">
            <summary>
            Gets a tag that specifies the PDFsharp build technology.
            It is either 'core', 'gdi', or 'wpf'.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.BeginPdfDocument">
            <summary>
            Creates a new PDF document.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.EndPdfDocument">
            <summary>
            Ends access to the current PDF document and renders it to a memory stream.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.BeginPdfPage">
            <summary>
            Creates a new page in the current PDF document.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.BeginPdfPage(PdfSharp.Drawing.XUnit,PdfSharp.Drawing.XUnit,PdfSharp.Drawing.XGraphicsUnit,PdfSharp.Drawing.XPageDirection)">
            <summary>
            Creates a new page in the current PDF document.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.EndPdfPage">
            <summary>
            Ends the current PDF page.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.GenerateParallelComparisonDocument">
            <summary>
            Generates a PDF document for parallel comparison of two render results.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.GenerateSerialComparisonDocument">
            <summary>
            Generates the serial comparison document. DOCTODO
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.SaveAndShowFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Saves the bytes to PDF file and show file.
            </summary>
            <param name="sourceBytes">The source bytes.</param>
            <param name="filepath">The filepath.</param>
            <param name="startViewer">if set to <c>true</c> [start viewer].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">sourceBytes</exception>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.SaveAndShowPdfDocument(System.String,System.Boolean)">
            <summary>
            Saves and optionally shows a PDF document.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="startViewer">if set to <c>true</c> [start viewer].</param>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.SaveAndShowPngImage(System.String,System.Boolean)">
            <summary>
            Saves and optionally shows a PNG image.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="startViewer">if set to <c>true</c> [start viewer].</param>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.SaveAndShowComparisonDocument(System.String,System.Boolean)">
            <summary>
            Saves and shows a parallel comparison PDF document.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="startViewer">if set to <c>true</c> [start viewer].</param>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.SaveStreamToFile(System.IO.Stream,System.String)">
            <summary>
            Saves a stream to a file.
            </summary>
            <param name="stream">The stream.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.BeginImage">
            <summary>
            Prepares new bitmap image for drawing.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FeatureAndSnippetBase.EndPngImage">
            <summary>
            Ends the current GDI+ image.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.Document">
            <summary>
            Gets the current PDF document.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.Page">
            <summary>
            Gets the current PDF page.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.XGraphics">
            <summary>
            Gets the current PDFsharp graphics object.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.PdfBytes">
            <summary>
            Gets the bytes of a PDF document.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.PngBytes">
            <summary>
            Gets the bytes of a PNG image.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.FeatureAndSnippetBase.ComparisonBytes">
            <summary>
            Gets the bytes of a comparision document.
            </summary>
        </member>
        <member name="T:PdfSharp.Quality.FontHelper">
            <summary>
            Static helper functions for fonts.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FontHelper.LoadFontData(System.String)">
            <summary>
            Returns the specified font from an embedded resource.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.FontHelper.LoadFontData(System.String,System.Reflection.Assembly)">
            <summary>
            Returns the specified font from an embedded resource.
            </summary>
        </member>
        <member name="T:PdfSharp.Quality.FontUtility">
            <summary>
            Static helper functions for file IO.
            </summary>
        </member>
        <member name="T:PdfSharp.Quality.IOHelper">
            <summary>
            Static helper functions for file IO.
            </summary>
        </member>
        <member name="T:PdfSharp.Quality.IOUtility">
            <summary>
            Static utility functions for file IO.
            These function are intended for unit test und sample in a solution code only.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.IsDirectorySeparator(System.Char)">
            <summary>
            True if the given character is a directory separator.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.NormalizeDirectorySeparators(System.String@)">
            <summary>
            Replaces all back-slashes with forward slashes in the specified path.
            The resulting path works under Windows and Linux if no drive names are
            included.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.GetSolutionRoot">
            <summary>
            Gets the root path of the current solution, or null, if no parent
            directory with a solution file exists.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.GetAssetsPath(System.String)">
            <summary>
            Gets the root path of the current assets directory if no parameter is specified,
            or null, if no assets directory exists in the solution root directory.
            If a parameter is specified gets the assets root path combined with the specified relative path or file.
            If only the root path is returned it always ends with a directory separator.
            If a parameter is specified the return value ends literally with value of the parameter.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.GetTempPath(System.String)">
            <summary>
            Gets the root or sub path of the current temp directory.
            The directory is created if it does not exist.
            If a valid path is returned it always ends with the current directory separator.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.GetViewerWatchDirectory">
            <summary>
            Gets the viewer watch directory.
            Which is currently just a hard-coded directory on drive C or /mnt/c
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.GetTempFileName(System.String,System.String,System.Boolean)">
            <summary>
            Creates a temporary file name with the pattern '{namePrefix}-{WIN|WSL|LNX|...}-{...uuid...}_temp.{extension}'.
            The name ends with '_temp.' to make it easy to delete it using the pattern '*_temp.{extension}'.
            No file is created by this function. The name contains 10 hex characters to make it unique.
            It is not tested whether the file exists, because we have no path here.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.GetTempFullFileName(System.String,System.String,System.Boolean)">
            <summary>
            Creates a temporary file and returns the full name. The name pattern is '/.../temp/.../{namePrefix}-{WIN|WSL|LNX|...}-{...uuid...}_temp.{extension}'.
            The namePrefix may contain a sub-path relative to the temp directory.
            The name ends with '_temp.' to make it easy to delete it using the pattern '*_temp.{extension}'.
            The file is created and immediately closed. That ensures the returned full file name can be used.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.FindLatestTempFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds the latest temporary file in a directory. The pattern of the file is expected
            to be '{namePrefix}*_temp.{extension}'.
            </summary>
            <param name="namePrefix">The prefix of the file name to search for.</param>
            <param name="path">The path to search in.</param>
            <param name="extension">The file extension of the file.</param>
            <param name="recursive">If set to <c>true</c> subdirectories are included in the search.</param>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.EnsureAssets(System.String,System.Nullable{System.Int32})">
            <summary>
            Ensures the assets folder exists in the solution root and an optional specified file
            or directory exists. If relativeFileOrDirectory is specified, it is considered to
            be a path to a directory if it ends with a directory separator. Otherwise, it is
            considered to ba a path to a file.
            </summary>
            <param name="relativeFileOrDirectory">A relative path to a file or directory.</param>
            <param name="requiredAssetsVersion">The minimum of the required assets version.</param>
        </member>
        <member name="M:PdfSharp.Quality.IOUtility.EnsureAssetsVersion(System.Int32)">
            <summary>
            Ensures the assets directory exists in the solution root and its version is at least the specified version.
            </summary>
            <param name="requiredAssetsVersion">The minimum of the required assets version.</param>
        </member>
        <member name="T:PdfSharp.Quality.PathHelper">
            <summary>
            Helper class for file paths.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.PathHelper.FindPath(System.String,System.String)">
            <summary>
            Builds a path by the following strategy. Get the current directory and find the specified folderName in it.
            Then replace the path right of folderName with the specified subPath.
            </summary>
            <param name="folderName">Name of a parent folder in the path to the current directory.</param>
            <param name="subPath">The sub path that substitutes the part right of folderName in the current directory path.</param>
            <returns>The new path.</returns>
        </member>
        <member name="T:PdfSharp.Quality.DocTag">
            <summary>
            Contains information of a PDF document created for testing purposes.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.DocTag.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="T:PdfSharp.Quality.PdfDocUtility">
            <summary>
            Static helper functions for file IO.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.PdfDocUtility.CreateNewPdfDocument(System.String)">
            <summary>
            Creates a PDF test document.
            </summary>
        </member>
        <member name="T:PdfSharp.Quality.PdfFileFormatter">
            <summary>
            Reads a PDF document, unpacks all its streams, and save it under a new name.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileFormatter.FormatDocument(System.String)">
            <summary>
            Reads a PDF file, formats the content and saves the new document.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:PdfSharp.Quality.PdfFileUtility">
            <summary>
            Static helper functions for file IO.
            These function are intended for unit test und sample in a solution code only.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileUtility.GetTempPdfFileName(System.String,System.Boolean)">
            <summary>
            Creates a temporary name of a PDF file with the pattern '{namePrefix}-{WIN|WSL|LNX|...}-{...uuid...}_temp.pdf'.
            The name ends with '_temp.pdf' to make it easy to delete it using the pattern '*_temp.pdf'.
            No file is created by this function. The name contains 10 hex characters to make it unique.
            It is not tested whether the file exists, because we have no path here.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileUtility.GetTempPdfFullFileName(System.String,System.Boolean)">
            <summary>
            Creates a temporary file and returns the full name. The name pattern is '.../temp/.../{namePrefix}-{WIN|WSL|LNX|...}-{...uuid...}_temp.pdf'.
            The namePrefix may contain a sub-path relative to the temp directory.
            The name ends with '_temp.pdf' to make it easy to delete it using the pattern '*_temp.pdf'.
            The file is created and immediately closed. That ensures the returned full file name can be used.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileUtility.FindLatestPdfTempFile(System.String,System.String,System.Boolean)">
            <summary>
            Finds the latest PDF temporary file in the specified folder, including sub-folders, or null,
            if no such file exists.
            </summary>
            <param name="name">The name.</param>
            <param name="path">The path.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileUtility.SaveDocument(PdfSharp.Pdf.PdfDocument,System.String,System.Boolean)">
            <summary>
            Save the specified document and returns the path.
            </summary>
            <param name="doc"></param>
            <param name="name"></param>
            <param name="addInfo"></param>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileUtility.SaveAndShowDocument(PdfSharp.Pdf.PdfDocument,System.String,System.Boolean)">
            <summary>
            Save the specified document and shows it in a PDF viewer application.
            </summary>
            <param name="doc"></param>
            <param name="name"></param>
            <param name="addInfo"></param>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileUtility.SaveAndShowDocumentIfDebugging(PdfSharp.Pdf.PdfDocument,System.String,System.Boolean)">
            <summary>
            Save the specified document and shows it in a PDF viewer application only if the current program
            is debugged.
            </summary>
            <param name="doc"></param>
            <param name="name"></param>
            <param name="addInfo"></param>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileUtility.ShowDocument(System.String)">
            <summary>
            Shows the specified document in a PDF viewer application.
            </summary>
            <param name="pdfFilename">The PDF filename.</param>
        </member>
        <member name="M:PdfSharp.Quality.PdfFileUtility.ShowDocumentIfDebugging(System.String)">
            <summary>
            Shows the specified document in a PDF viewer application only if the current program
            is debugged. 
            </summary>
            <param name="pdfFilename">The PDF filename.</param>
        </member>
        <member name="T:PdfSharp.Quality.Snippet">
            <summary>
            Base class of code snippets for testing.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PdfSharp.Quality.Snippet"/> class.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.Title">
            <summary>
            Gets or sets the title of the snipped
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.PathName">
            <summary>
            Gets or sets the path or name where to store the PDF file.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.BoxOption">
            <summary>
            Gets or sets the box option.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.Cleanroom">
            <summary>
            Gets or sets a value indicating how this <see cref="T:PdfSharp.Quality.Snippet"/> is drawn.
            If it is true, all describing graphics like title and boxes are omitted.
            Use this option to produce a clean PDF for debugging purposes.
            If it is false, all describing graphics like title and boxes are drawn.
            This is the regular case.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.NoGraphic">
            <summary>
            Gets or sets a value indicating whether all graphics output is omitted.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.NoText">
            <summary>
            Gets or sets a value indicating whether all text output is omitted.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.FontNameStd">
            <summary>
            The standard font name used in snippet.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.FontStd">
            <summary>
            Gets the standard font in snippets.
            </summary>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.FontHeader">
            <summary>
            Gets the header font in snippets.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawNotSupportedFeature(PdfSharp.Drawing.XGraphics)">
            <summary>
            Draws a text that states that a feature is not supported in a particular build.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawHeader(PdfSharp.Drawing.XGraphics,System.String)">
            <summary>
            Draws the header.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawHeader(System.String)">
            <summary>
            Draws the header.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawPdfHeader">
            <summary>
            Draws the header for a PDF document.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawPngHeader">
            <summary>
            Draws the header for a PNG image.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.RenderSnippet(PdfSharp.Drawing.XGraphics)">
            <summary>
            When implemented in a derived class renders the snippet in the specified XGraphic object.
            </summary>
            <param name="gfx">The XGraphics where to render the snippet.</param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.RenderSnippet">
            <summary>
            When implemented in a derived class renders the snippet in an XGraphic object.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.RenderSnippetAsPdf">
            <summary>
            Renders a snippet as PDF document.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.RenderSnippetAsPdf(PdfSharp.Drawing.XUnit,PdfSharp.Drawing.XUnit,PdfSharp.Drawing.XGraphicsUnit,PdfSharp.Drawing.XPageDirection)">
            <summary>
            Renders a snippet as PDF document.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="graphicsUnit"></param>
            <param name="pageDirection"></param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.RenderSnippetAsPng">
            <summary>
            Renders a snippet as PNG image.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.CreatePdfPage(PdfSharp.Pdf.PdfDocument)">
            <summary>
            Creates a PDF page for the specified document.
            </summary>
            <param name="doc">The document.</param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.BeginBox(PdfSharp.Drawing.XGraphics,System.Int32,PdfSharp.Quality.FeatureAndSnippetBase.BoxOptions,System.String)">
            <summary>
            Translates origin of coordinate space to a box of size 220pp x 140pp.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.BeginBox(PdfSharp.Drawing.XGraphics,System.Int32)">
            <summary>
            Begins rendering the content of a box.
            </summary>
            <param name="gfx">The XGraphics object.</param>
            <param name="boxNumber">The box number.</param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.BeginBox(PdfSharp.Drawing.XGraphics,System.Int32,PdfSharp.Quality.FeatureAndSnippetBase.BoxOptions)">
            <summary>
            Begins rendering the content of a box.
            </summary>
            <param name="gfx">The XGraphics object.</param>
            <param name="boxNumber">The box number.</param>
            <param name="options">The box options.</param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.EndBox(PdfSharp.Drawing.XGraphics)">
            <summary>
            Ends rendering of the current box.
            </summary>
            <param name="gfx">The XGraphics object.</param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawTiledBox(PdfSharp.Drawing.XGraphics,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a tiled box.
            </summary>
            <param name="gfx">The XGraphics object.</param>
            <param name="x">The left position of the box.</param>
            <param name="y">The top position of the box.</param>
            <param name="width">The width of the box.</param>
            <param name="height">The height of the box.</param>
            <param name="delta">The size of the grid square.</param>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.RectBox">
            <summary>
            Gets the rectangle of a box.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawCenterPoint(PdfSharp.Drawing.XGraphics)">
            <summary>
            Draws the center point of a box.
            </summary>
            <param name="gfx">The XGraphics object.</param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawAlignmentGrid(PdfSharp.Drawing.XGraphics,System.Boolean,System.Boolean)">
            <summary>
            Draws the alignment grid.
            </summary>
            <param name="gfx">The XGraphics object.</param>
            <param name="highlightHorizontal">if set to <c>true</c> [highlight horizontal].</param>
            <param name="highlightVertical">if set to <c>true</c> [highlight vertical].</param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.DrawArtBox(PdfSharp.Drawing.XGraphics)">
            <summary>
            Draws a dotted line showing the art box.
            </summary>
            <param name="gfx">The XGraphics object.</param>
        </member>
        <member name="P:PdfSharp.Quality.Snippet.Pentagram">
            <summary>
            Gets the points of a pentagram in a unit circle.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.GetPentagram(System.Double,PdfSharp.Drawing.XPoint)">
            <summary>
            Gets the points of a pentagram relative to a center and scaled by a size factor.
            </summary>
            <param name="size">The scaling factor of the pentagram.</param>
            <param name="center">The center of the pentagram.</param>
            <returns></returns>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.HelloWorldFactory(System.String,System.Boolean)">
            <summary>
            Creates a HelloWorld document, optionally with custom message.
            </summary>
            <param name="message"></param>
            <param name="unicode"></param>
        </member>
        <member name="M:PdfSharp.Quality.Snippet.GfxForLastPage(PdfSharp.Pdf.PdfDocument)">
            <summary>
            Gets a XGraphics object for the last page of the specified document.
            </summary>
            <param name="doc">The PDF document.</param>
        </member>
        <member name="T:PdfSharp.Quality.XGraphicsDevExtensions">
            <summary>
            Extensions for the XGraphics class.
            </summary>
        </member>
        <member name="M:PdfSharp.Quality.XGraphicsDevExtensions.DrawMeasureBox(PdfSharp.Drawing.XGraphics,System.String,PdfSharp.Drawing.XFont,PdfSharp.Drawing.XPoint)">
            <summary>
            Draws the measurement box for a specified text and a font.
            </summary>
            <param name="gfx">The XGraphics object</param>
            <param name="text">The text to be measured.</param>
            <param name="font">The font to be used for measuring.</param>
            <param name="pos">The start point of the box.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Required to compile init-only setters in .NET Standard and .NET Framework 4.71.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
            <summary>
            Slices the specified array using the specified range.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don’t validate the input length parameter and the returned offset value against negative values.
            we don’t validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non-negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don’t validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non-negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="M:StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            String.Contains implementation for .NET Framework and .NET Standard as an extension method.
            </summary>
        </member>
    </members>
</doc>
