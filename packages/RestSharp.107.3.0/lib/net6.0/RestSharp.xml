<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RestSharp</name>
    </assembly>
    <members>
        <member name="T:RestSharp.Authenticators.HttpBasicAuthenticator">
            <summary>
            Allows "basic access authentication" for HTTP requests.
            </summary>
            <remarks>
            Encoding can be specified depending on what your server expect (see https://stackoverflow.com/a/7243567).
            UTF-8 is used by default but some servers might expect ISO-8859-1 encoding.
            </remarks>
        </member>
        <member name="T:RestSharp.Authenticators.JwtAuthenticator">
            <summary>
            JSON WEB TOKEN (JWT) Authenticator class.
            <remarks>https://tools.ietf.org/html/draft-ietf-oauth-json-web-token</remarks>
            </summary>
        </member>
        <member name="M:RestSharp.Authenticators.JwtAuthenticator.SetBearerToken(System.String)">
            <summary>
            Set the new bearer token so the request gets the new header value
            </summary>
            <param name="accessToken"></param>
        </member>
        <member name="F:RestSharp.Authenticators.OAuth.OAuthTools.UriRfc3986CharsToEscape">
            <summary>
            The set of characters that are unreserved in RFC 2396 but are NOT unreserved in RFC 3986.
            </summary>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetNonce">
            <summary>
            Generates a random 16-byte lowercase alphanumeric string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetTimestamp">
            <summary>
            Generates a timestamp based on the current elapsed seconds since '01/01/1970 0000 GMT"
            </summary>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetTimestamp(System.DateTime)">
            <summary>
            Generates a timestamp based on the elapsed seconds of a given time since '01/01/1970 0000 GMT"
            </summary>
            <param name="dateTime">A specified point in time.</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.UrlEncodeRelaxed(System.String)">
            <summary>
            URL encodes a string based on section 5.1 of the OAuth spec.
            Namely, percent encoding with [RFC3986], avoiding unreserved characters,
            upper-casing hexadecimal characters, and UTF-8 encoding for text value pairs.
            </summary>
            <param name="value">The value to escape.</param>
            <returns>The escaped value.</returns>
            <remarks>
            The <see cref="M:System.Uri.EscapeDataString(System.String)" /> method is <i>supposed</i> to take on
            RFC 3986 behavior if certain elements are present in a .config file.  Even if this
            actually worked (which in my experiments it <i>doesn't</i>), we can't rely on every
            host actually having this configuration element present.
            </remarks>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.UrlEncodeStrict(System.String)">
            <summary>
            URL encodes a string based on section 5.1 of the OAuth spec.
            Namely, percent encoding with [RFC3986], avoiding unreserved characters,
            upper-casing hexadecimal characters, and UTF-8 encoding for text value pairs.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.NormalizeRequestParameters(RestSharp.Authenticators.OAuth.WebPairCollection)">
            <summary>
            Sorts a collection of key-value pairs by name, and then value if equal,
            concatenating them into a single string. This string should be encoded
            prior to, or after normalization is run.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.SortParametersExcludingSignature(RestSharp.Authenticators.OAuth.WebPairCollection)">
            <summary>
            Sorts a <see cref="T:RestSharp.Authenticators.OAuth.WebPairCollection" /> by name, and then value if equal.
            </summary>
            <param name="parameters">A collection of parameters to sort</param>
            <returns>A sorted parameter collection</returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.ConstructRequestUrl(System.Uri)">
            <summary>
            Creates a request URL suitable for making OAuth requests.
            Resulting URLs must exclude port 80 or port 443 when accompanied by HTTP and HTTPS, respectively.
            Resulting URLs must be lower case.
            </summary>
            <param name="url">The original request URL</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.ConcatenateRequestElements(System.String,System.String,RestSharp.Authenticators.OAuth.WebPairCollection)">
            <summary>
            Creates a request elements concatenation value to send with a request.
            This is also known as the signature base.
            </summary>
            <param name="method">The request HTTP method type</param>
            <param name="url">The request URL</param>
            <param name="parameters">The request parameters</param>
            <returns>A signature base string</returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,System.String,System.String)">
            <summary>
            Creates a signature value given a signature base and the consumer secret.
            This method is used when the token secret is currently unknown.
            </summary>
            <param name="signatureMethod">The hashing method</param>
            <param name="signatureBase">The signature base</param>
            <param name="consumerSecret">The consumer key</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,RestSharp.Authenticators.OAuth.OAuthSignatureTreatment,System.String,System.String)">
            <summary>
            Creates a signature value given a signature base and the consumer secret.
            This method is used when the token secret is currently unknown.
            </summary>
            <param name="signatureMethod">The hashing method</param>
            <param name="signatureTreatment">The treatment to use on a signature value</param>
            <param name="signatureBase">The signature base</param>
            <param name="consumerSecret">The consumer key</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthTools.GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,RestSharp.Authenticators.OAuth.OAuthSignatureTreatment,System.String,System.String,System.String)">
            <summary>
            Creates a signature value given a signature base and the consumer secret and a known token secret.
            </summary>
            <param name="signatureMethod">The hashing method</param>
            <param name="signatureTreatment">The treatment to use on a signature value</param>
            <param name="signatureBase">The signature base</param>
            <param name="consumerSecret">The consumer secret</param>
            <param name="tokenSecret">The token secret</param>
            <returns></returns>
        </member>
        <member name="T:RestSharp.Authenticators.OAuth.OAuthWorkflow">
            <summary>
            A class to encapsulate OAuth authentication flow.
            </summary>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthWorkflow.BuildRequestTokenInfo(System.String,RestSharp.Authenticators.OAuth.WebPairCollection)">
            <summary>
            Generates an OAuth signature to pass to an
            <see cref="T:RestSharp.Authenticators.IAuthenticator" /> for the purpose of requesting an
            unauthorized request token.
            </summary>
            <param name="method">The HTTP method for the intended request</param>
            <param name="parameters">Any existing, non-OAuth query parameters desired in the request</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthWorkflow.BuildAccessTokenSignature(System.String,RestSharp.Authenticators.OAuth.WebPairCollection)">
            <summary>
            Generates an OAuth signature to pass to the
            <see cref="T:RestSharp.Authenticators.IAuthenticator" /> for the purpose of exchanging a request token
            for an access token authorized by the user at the Service Provider site.
            </summary>
            <param name="method">The HTTP method for the intended request</param>
            <param name="parameters">Any existing, non-OAuth query parameters desired in the request</param>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth.OAuthWorkflow.BuildClientAuthAccessTokenSignature(System.String,RestSharp.Authenticators.OAuth.WebPairCollection)">
            <summary>
            Generates an OAuth signature to pass to an
            <see cref="T:RestSharp.Authenticators.IAuthenticator" /> for the purpose of exchanging user credentials
            for an access token authorized by the user at the Service Provider site.
            </summary>
            <param name="method">The HTTP method for the intended request</param>
            <param name="parameters">Any existing, non-OAuth query parameters desired in the request</param>
        </member>
        <member name="T:RestSharp.Authenticators.OAuth1Authenticator">
            <seealso href="http://tools.ietf.org/html/rfc5849">RFC: The OAuth 1.0 Protocol</seealso>
        </member>
        <member name="T:RestSharp.Authenticators.OAuth2.OAuth2AuthorizationRequestHeaderAuthenticator">
            <summary>
            The OAuth 2 authenticator using the authorization request header field.
            </summary>
            <remarks>
            Based on http://tools.ietf.org/html/draft-ietf-oauth-v2-10#section-5.1.1
            </remarks>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth2.OAuth2AuthorizationRequestHeaderAuthenticator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Authenticators.OAuth2.OAuth2AuthorizationRequestHeaderAuthenticator" /> class.
            </summary>
            <param name="accessToken">The access token.</param>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth2.OAuth2AuthorizationRequestHeaderAuthenticator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Authenticators.OAuth2.OAuth2AuthorizationRequestHeaderAuthenticator" /> class.
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="tokenType">The token type.</param>
        </member>
        <member name="T:RestSharp.Authenticators.OAuth2.OAuth2UriQueryParameterAuthenticator">
            <summary>
            The OAuth 2 authenticator using URI query parameter.
            </summary>
            <remarks>
            Based on http://tools.ietf.org/html/draft-ietf-oauth-v2-10#section-5.1.2
            </remarks>
        </member>
        <member name="M:RestSharp.Authenticators.OAuth2.OAuth2UriQueryParameterAuthenticator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Authenticators.OAuth2.OAuth2UriQueryParameterAuthenticator" /> class.
            </summary>
            <param name="accessToken">The access token.</param>
        </member>
        <member name="T:RestSharp.ParameterType">
            <summary>
            Types of parameters that can be added to requests
            </summary>
        </member>
        <member name="F:RestSharp.ParameterType.GetOrPost">
            <summary>
            Cookie parameter
            </summary>
        </member>
        <member name="T:RestSharp.DataFormat">
            <summary>
            Data formats
            </summary>
        </member>
        <member name="T:RestSharp.Method">
            <summary>
            HTTP method to use when making requests
            </summary>
        </member>
        <member name="T:RestSharp.DateFormat">
            <summary>
            Format strings for commonly-used date formats
            </summary>
        </member>
        <member name="F:RestSharp.DateFormat.ISO_8601">
            <summary>
            .NET format string for ISO 8601 date format
            </summary>
        </member>
        <member name="F:RestSharp.DateFormat.ROUND_TRIP">
            <summary>
            .NET format string for roundtrip date format
            </summary>
        </member>
        <member name="T:RestSharp.ResponseStatus">
            <summary>
            Status for responses (surprised?)
            </summary>
        </member>
        <member name="T:RestSharp.Extensions.MiscExtensions">
            <summary>
            Extension method overload!
            </summary>
        </member>
        <member name="M:RestSharp.Extensions.MiscExtensions.ReadAsBytes(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Read a stream into a byte array
            </summary>
            <param name="input">Stream to read</param>
            <param name="cancellationToken"></param>
            <returns>byte[]</returns>
        </member>
        <member name="T:RestSharp.Extensions.ReflectionExtensions">
            <summary>
            Reflection extensions
            </summary>
        </member>
        <member name="M:RestSharp.Extensions.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Retrieve an attribute from a member (property)
            </summary>
            <typeparam name="T">Type of attribute to retrieve</typeparam>
            <param name="prop">Member to retrieve attribute from</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.ReflectionExtensions.GetAttribute``1(System.Type)">
            <summary>
            Retrieve an attribute from a type
            </summary>
            <typeparam name="T">Type of attribute to retrieve</typeparam>
            <param name="type">Type to retrieve attribute from</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.ReflectionExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Checks a type to see if it derives from a raw generic (e.g. List[[]])
            </summary>
            <param name="toCheck"></param>
            <param name="generic"></param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.ReflectionExtensions.FindEnumValue(System.Type,System.String,System.Globalization.CultureInfo)">
            <summary>
            Find a value from a System.Enum by trying several possible variants
            of the string value of the enum.
            </summary>
            <param name="type">Type of enum</param>
            <param name="value">Value for which to search</param>
            <param name="culture">The culture used to calculate the name variants</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.UrlEncode(System.String)">
            <summary>
            Uses Uri.EscapeDataString() based on recommendations on MSDN
            http://blogs.msdn.com/b/yangxind/archive/2006/11/09/don-t-use-net-system-uri-unescapedatastring-in-url-decoding.aspx
            </summary>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.RemoveUnderscoresAndDashes(System.String)">
            <summary>
            Remove underscores from a string
            </summary>
            <param name="input">String to process</param>
            <returns>string</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.ToPascalCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to pascal case
            </summary>
            <param name="lowercaseAndUnderscoredWord">String to convert</param>
            <param name="culture"></param>
            <returns>string</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.ToPascalCase(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to pascal case with the option to remove underscores
            </summary>
            <param name="text">String to convert</param>
            <param name="removeUnderscores">Option to remove underscores</param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.ToCamelCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to camel case
            </summary>
            <param name="lowercaseAndUnderscoredWord">String to convert</param>
            <param name="culture"></param>
            <returns>String</returns>
        </member>
        <member name="M:RestSharp.Extensions.StringExtensions.GetNameVariants(System.String,System.Globalization.CultureInfo)">
            <summary>
            Return possible variants of a name for name matching.
            </summary>
            <param name="name">String to convert</param>
            <param name="culture">The culture to use for conversion</param>
            <returns>IEnumerable&lt;string&gt;</returns>
        </member>
        <member name="P:RestSharp.BodyParameter.DataFormat">
            <summary>
            Body parameter data type
            </summary>
        </member>
        <member name="P:RestSharp.BodyParameter.ContentEncoding">
            <summary>
            Custom content encoding
            </summary>
        </member>
        <member name="T:RestSharp.FileParameter">
            <summary>
            Container for files to be uploaded with requests
            </summary>
        </member>
        <member name="P:RestSharp.FileParameter.GetFile">
            <summary>
            Provides raw data for file
            </summary>
        </member>
        <member name="P:RestSharp.FileParameter.FileName">
            <summary>
            Name of the file to use when uploading
            </summary>
        </member>
        <member name="P:RestSharp.FileParameter.ContentType">
            <summary>
            MIME content type of file
            </summary>
        </member>
        <member name="P:RestSharp.FileParameter.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="M:RestSharp.FileParameter.Create(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Creates a file parameter from an array of bytes.
            </summary>
            <param name="name">The parameter name to use in the request.</param>
            <param name="data">The data to use as the file's contents.</param>
            <param name="filename">The filename to use in the request.</param>
            <param name="contentType">The content type to use in the request.</param>
            <returns>The <see cref="T:RestSharp.FileParameter" /></returns>
        </member>
        <member name="M:RestSharp.FileParameter.Create(System.String,System.Func{System.IO.Stream},System.String,System.String)">
            <summary>
            Creates a file parameter from an array of bytes.
            </summary>
            <param name="name">The parameter name to use in the request.</param>
            <param name="getFile">Delegate that will be called with the request stream so you can write to it..</param>
            <param name="fileName">The filename to use in the request.</param>
            <param name="contentType">Optional: parameter content type, default is "application/g-zip"</param>
            <returns>The <see cref="T:RestSharp.FileParameter" /> using the default content type.</returns>
        </member>
        <member name="M:RestSharp.GetOrPostParameter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates an HTTP parameter instance (QueryString for GET, DELETE, OPTIONS and HEAD; Encoded form for POST and PUT)
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="encode">Encode the value or not, default true</param>
        </member>
        <member name="M:RestSharp.HeaderParameter.#ctor(System.String,System.String)">
            <summary>
            Instantiates a header parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="T:RestSharp.Parameter">
            <summary>
            Parameter container for REST requests
            </summary>
        </member>
        <member name="M:RestSharp.Parameter.#ctor(System.String,System.Object,RestSharp.ParameterType,System.Boolean)">
            <summary>
            Parameter container for REST requests
            </summary>
        </member>
        <member name="P:RestSharp.Parameter.ContentType">
            <summary>
            MIME content type of the parameter
            </summary>
        </member>
        <member name="M:RestSharp.Parameter.ToString">
            <summary>
            Return a human-readable representation of this parameter
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:RestSharp.QueryParameter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates a new query parameter instance that will be added to the request URL as {name}={value} part of the query string.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="encode">Optional: encode the value, default is true</param>
        </member>
        <member name="M:RestSharp.UrlSegmentParameter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates a new query parameter instance that will be added to the request URL part of the query string.
            The request resource should have a placeholder {name} that will be replaced with the parameter value when the request is made.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="encode">Optional: encode the value, default is true</param>
        </member>
        <member name="T:RestSharp.RestRequest">
            <summary>
            Container for data used to make requests
            </summary>
        </member>
        <member name="M:RestSharp.RestRequest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.AlwaysMultipartFormData">
            <summary>
            Always send a multipart/form-data request - even when no Files are present.
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.MultipartFormQuoteParameters">
            <summary>
            When set to true, parameters in a multipart form data requests will be enclosed in
            quotation marks. Default is false. Enable it if the remote endpoint requires parameters
            to be in quotes (for example, FreshDesk API). 
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.Parameters">
            <summary>
            Container of all HTTP parameters to be passed with the request.
            See AddParameter() for explanation of the types of parameters that can be passed
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.Files">
            <summary>
            Container of all the files to be uploaded with the request.
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.Method">
            <summary>
            Determines what HTTP method to use for this request. Supported methods: GET, POST, PUT, DELETE, HEAD, OPTIONS
            Default is GET
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.Timeout">
            <summary>
            Custom request timeout
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.Resource">
            <summary>
            The Resource URL to make the request against.
            Tokens are substituted with UrlSegment parameters and match by name.
            Should not include the scheme or domain. Do not include leading slash.
            Combined with RestClient.BaseUrl to assemble final URL:
            {BaseUrl}/{Resource} (BaseUrl is scheme + domain, e.g. http://example.com)
            </summary>
            <example>
            // example for url token replacement
            request.Resource = "Products/{ProductId}";
            request.AddParameter("ProductId", 123, ParameterType.UrlSegment);
            </example>
        </member>
        <member name="P:RestSharp.RestRequest.RequestFormat">
            <summary>
            Serializer to use when writing request bodies.
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.RootElement">
            <summary>
            Used by the default deserializers to determine where to start deserializing from.
            Can be used to skip container or root elements that do not have corresponding deserialzation targets.
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.OnBeforeDeserialization">
            <summary>
            When supplied, the function will be called before calling the deserializer
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.OnBeforeRequest">
            <summary>
            When supplied, the function will be called before making a request
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.OnAfterRequest">
            <summary>
            When supplied, the function will be called after the request is complete
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.Attempts">
            <summary>
            How many attempts were made to send this Request
            </summary>
            <remarks>
            This number is incremented each time the RestClient sends the request.
            </remarks>
        </member>
        <member name="P:RestSharp.RestRequest.CompletionOption">
            <summary>
            Completion option for <seealso cref="T:System.Net.Http.HttpClient"/>
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.ResponseWriter">
            <summary>
            Set this to write response to Stream rather than reading into memory.
            </summary>
        </member>
        <member name="P:RestSharp.RestRequest.AdvancedResponseWriter">
            <summary>
            Set this to handle the response stream yourself, based on the response details
            </summary>
        </member>
        <member name="M:RestSharp.RestRequest.AddParameter(RestSharp.Parameter)">
            <summary>
            Adds a parameter object to the request parameters
            </summary>
            <param name="parameter">Parameter to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequest.RemoveParameter(RestSharp.Parameter)">
            <summary>
            Removes a parameter object from the request parameters
            </summary>
            <param name="parameter">Parameter to remove</param>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddParameter(RestSharp.RestRequest,System.String,System.String,System.Boolean)">
            <summary>
            Adds a HTTP parameter to the request (QueryString for GET, DELETE, OPTIONS and HEAD; Encoded form for POST and PUT)
            </summary>
            <param name="request"></param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddParameter``1(RestSharp.RestRequest,System.String,``0,System.Boolean)">
            <summary>
            Adds a HTTP parameter to the request (QueryString for GET, DELETE, OPTIONS and HEAD; Encoded form for POST and PUT)
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddOrUpdateParameter(RestSharp.RestRequest,System.String,System.String,System.Boolean)">
            <summary>
            Adds or updates a HTTP parameter to the request (QueryString for GET, DELETE, OPTIONS and HEAD; Encoded form for POST and PUT)
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddOrUpdateParameter``1(RestSharp.RestRequest,System.String,``0,System.Boolean)">
            <summary>
            Adds or updates a HTTP parameter to the request (QueryString for GET, DELETE, OPTIONS and HEAD; Encoded form for POST and PUT)
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddUrlSegment(RestSharp.RestRequest,System.String,System.String,System.Boolean)">
            <summary>
            Adds a URL segment parameter to the request. The resource URL must have a placeholder for the parameter for it to work.
            For example, if you add a URL segment parameter with the name "id", the resource URL should contain {id} in its path.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Name of the parameter, must be matching a placeholder in the resource URL as {name}</param>
            <param name="value">Value of the parameter</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddUrlSegment``1(RestSharp.RestRequest,System.String,``0,System.Boolean)">
            <summary>
            Adds a URL segment parameter to the request. The resource URL must have a placeholder for the parameter for it to work.
            For example, if you add a URL segment parameter with the name "id", the resource URL should contain {id} in its path.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Name of the parameter, must be matching a placeholder in the resource URL as {name}</param>
            <param name="value">Value of the parameter</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddQueryParameter(RestSharp.RestRequest,System.String,System.String,System.Boolean)">
            <summary>
            Adds a query string parameter to the request. The request resource should not contain any placeholders for this parameter.
            The parameter will be added to the request URL as a query string using name=value format.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddQueryParameter``1(RestSharp.RestRequest,System.String,``0,System.Boolean)">
            <summary>
            Adds a query string parameter to the request. The request resource should not contain any placeholders for this parameter.
            The parameter will be added to the request URL as a query string using name=value format.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddHeader(RestSharp.RestRequest,System.String,System.String)">
            <summary>
            Adds a header to the request. RestSharp will try to separate request and content headers when calling the resource.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Header name</param>
            <param name="value">Header value</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddHeader``1(RestSharp.RestRequest,System.String,``0)">
            <summary>
            Adds a header to the request. RestSharp will try to separate request and content headers when calling the resource.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Header name</param>
            <param name="value">Header value</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddOrUpdateHeader(RestSharp.RestRequest,System.String,System.String)">
            <summary>
            Adds or updates the request header. RestSharp will try to separate request and content headers when calling the resource.
            Existing header with the same name will be replaced.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Header name</param>
            <param name="value">Header value</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddOrUpdateHeader``1(RestSharp.RestRequest,System.String,``0)">
            <summary>
            Adds or updates the request header. RestSharp will try to separate request and content headers when calling the resource.
            Existing header with the same name will be replaced.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Header name</param>
            <param name="value">Header value</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddHeaders(RestSharp.RestRequest,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds multiple headers to the request, using the key-value pairs provided.
            </summary>
            <param name="request">Request instance</param>
            <param name="headers">Collection of key-value pairs, where key will be used as header name, and value as header value</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddOrUpdateHeaders(RestSharp.RestRequest,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds or updates multiple headers to the request, using the key-value pairs provided. Existing headers with the same name will be replaced.
            </summary>
            <param name="request">Request instance</param>
            <param name="headers">Collection of key-value pairs, where key will be used as header name, and value as header value</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddParameter(RestSharp.RestRequest,System.String,System.Object,RestSharp.ParameterType,System.Boolean)">
            <summary>
            Adds a parameter of a given type to the request. It will create a typed parameter instance based on the type argument.
            It is not recommended to use this overload unless you must, as it doesn't provide any restrictions, and if the name-value-type
            combination doesn't match, it will throw.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Name of the parameter, must be matching a placeholder in the resource URL as {name}</param>
            <param name="value">Value of the parameter</param>
            <param name="type">Enum value specifying what kind of parameter is being added</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddOrUpdateParameter(RestSharp.RestRequest,System.String,System.Object,RestSharp.ParameterType,System.Boolean)">
            <summary>
            Adds or updates request parameter of a given type. It will create a typed parameter instance based on the type argument.
            Parameter will be added or updated based on its name. If the request has a parameter with the same name, it will be updated.
            It is not recommended to use this overload unless you must, as it doesn't provide any restrictions, and if the name-value-type
            combination doesn't match, it will throw.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Name of the parameter, must be matching a placeholder in the resource URL as {name}</param>
            <param name="value">Value of the parameter</param>
            <param name="type">Enum value specifying what kind of parameter is being added</param>
            <param name="encode">Encode the value or not, default true</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddOrUpdateParameter(RestSharp.RestRequest,RestSharp.Parameter)">
            <summary>
            Adds or updates request parameter, given the parameter instance, for example <see cref="T:RestSharp.QueryParameter"/> or <see cref="T:RestSharp.UrlSegmentParameter"/>.
            It will replace an existing parameter with the same name.
            </summary>
            <param name="request">Request instance</param>
            <param name="parameter">Parameter instance</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddOrUpdateParameters(RestSharp.RestRequest,System.Collections.Generic.IEnumerable{RestSharp.Parameter})">
            <summary>
            Adds or updates multiple request parameters, given the parameter instance, for example
            <see cref="T:RestSharp.QueryParameter"/> or <see cref="T:RestSharp.UrlSegmentParameter"/>. Parameters with the same name will be replaced.
            </summary>
            <param name="request">Request instance</param>
            <param name="parameters">Collection of parameter instances</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddFile(RestSharp.RestRequest,System.String,System.String,System.String)">
            <summary>
            Adds a file parameter to the request body. The file will be read from disk as a stream.
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Parameter name</param>
            <param name="path">Full path to the file</param>
            <param name="contentType">Optional: content type</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddFile(RestSharp.RestRequest,System.String,System.Byte[],System.String,System.String)">
            <summary>
            Adds bytes to the request as file attachment
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Parameter name</param>
            <param name="bytes">File content as bytes</param>
            <param name="filename">File name</param>
            <param name="contentType">Optional: content type. Default is "application/octet-stream"</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddFile(RestSharp.RestRequest,System.String,System.Func{System.IO.Stream},System.String,System.String)">
            <summary>
            Adds a file attachment to the request, where the file content will be retrieved from a given stream 
            </summary>
            <param name="request">Request instance</param>
            <param name="name">Parameter name</param>
            <param name="getFile">Function that returns a stream with the file content</param>
            <param name="fileName">File name</param>
            <param name="contentType">Optional: content type. Default is "application/octet-stream"</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddBody(RestSharp.RestRequest,System.Object,System.String)">
            <summary>
            Adds a body parameter to the request
            </summary>
            <param name="request">Request instance</param>
            <param name="obj">Object to be used as the request body, or string for plain content</param>
            <param name="contentType">Optional: content type</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if request body type cannot be resolved</exception>
            <remarks>This method will try to figure out the right content type based on the request data format and the provided content type</remarks>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddStringBody(RestSharp.RestRequest,System.String,RestSharp.DataFormat)">
            <summary>
            Adds a string body and figures out the content type from the data format specified. You can, for example, add a JSON string
            using this method as request body, using DataFormat.Json/>
            </summary>
            <param name="request">Request instance</param>
            <param name="body">String body</param>
            <param name="dataFormat"><see cref="T:RestSharp.DataFormat"/> for the content</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddStringBody(RestSharp.RestRequest,System.String,System.String)">
            <summary>
            Adds a string body to the request using the specified content type.
            </summary>
            <param name="request">Request instance</param>
            <param name="body">String body</param>
            <param name="contentType">Content type of the body</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddJsonBody``1(RestSharp.RestRequest,``0,System.String)">
            <summary>
            Adds a JSON body parameter to the request
            </summary>
            <param name="request">Request instance</param>
            <param name="obj">Object that will be serialized to JSON</param>
            <param name="contentType">Optional: content type. Default is "application/json"</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddXmlBody``1(RestSharp.RestRequest,``0,System.String,System.String)">
            <summary>
            Adds an XML body parameter to the request
            </summary>
            <param name="request">Request instance</param>
            <param name="obj">Object that will be serialized to XML</param>
            <param name="contentType">Optional: content type. Default is "application/xml"</param>
            <param name="xmlNamespace">Optional: XML namespace</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestRequestExtensions.AddObject``1(RestSharp.RestRequest,``0,System.String[])">
            <summary>
            Gets object properties and adds each property as a form data parameter
            </summary>
            <param name="request">Request instance</param>
            <param name="obj">Object to add as form data</param>
            <param name="includedProperties">Properties to include, or nothing to include everything</param>
            <returns></returns>
        </member>
        <member name="P:RestSharp.RestXmlRequest.DateFormat">
            <summary>
            Used by the default deserializers to explicitly set which date format string to use when parsing dates.
            </summary>
        </member>
        <member name="P:RestSharp.RestXmlRequest.XmlNamespace">
            <summary>
            Used by XmlDeserializer. If not specified, XmlDeserializer will flatten response by removing namespaces from
            element names.
            </summary>
        </member>
        <member name="T:RestSharp.RestResponse`1">
            <summary>
            Container for data sent back from API including deserialized data
            </summary>
            <typeparam name="T">Type of data to deserialize to</typeparam>
        </member>
        <member name="P:RestSharp.RestResponse`1.Data">
            <summary>
            Deserialized entity data
            </summary>
        </member>
        <member name="T:RestSharp.RestResponse">
            <summary>
            Container for data sent back from API
            </summary>
        </member>
        <member name="T:RestSharp.RestResponseBase">
            <summary>
            Base class for common properties shared by RestResponse and RestResponse[[T]]
            </summary>
        </member>
        <member name="M:RestSharp.RestResponseBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.Request">
            <summary>
            The RestRequest that was made to get this RestResponse
            </summary>
            <remarks>
            Mainly for debugging if ResponseStatus is not OK
            </remarks>
        </member>
        <member name="P:RestSharp.RestResponseBase.ContentType">
            <summary>
            MIME content type of response
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.ContentLength">
            <summary>
            Length in bytes of the response content
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.ContentEncoding">
            <summary>
            Encoding of the response content
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.Content">
            <summary>
            String representation of response content
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.StatusCode">
            <summary>
            HTTP response status code
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.IsSuccessful">
            <summary>
            Whether or not the response status code indicates success
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.StatusDescription">
            <summary>
            Description of HTTP status returned
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.RawBytes">
            <summary>
            Response content
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.ResponseUri">
            <summary>
            The URL that actually responded to the content (different from request if redirected)
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.Server">
            <summary>
            HttpWebResponse.Server
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.Cookies">
            <summary>
            Cookies returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.Headers">
            <summary>
            Response headers returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.ContentHeaders">
            <summary>
            Content headers returned by server with the response
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.ResponseStatus">
            <summary>
            Status of the request. Will return Error for transport errors.
            HTTP errors will still return ResponseStatus.Completed, check StatusCode instead
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.ErrorMessage">
            <summary>
            Transport or other non-HTTP error generated while attempting request
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.ErrorException">
            <summary>
            The exception thrown during the request, if any
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.Version">
            <summary>
            HTTP protocol version of the request
            </summary>
        </member>
        <member name="P:RestSharp.RestResponseBase.RootElement">
            <summary>
            Root element of the serialized response content, only works if deserializer supports it 
            </summary>
        </member>
        <member name="M:RestSharp.RestResponseBase.DebuggerDisplay">
            <summary>
            Assists with debugging responses by displaying in the debugger output
            </summary>
            <returns></returns>
        </member>
        <member name="T:RestSharp.RestClient">
            <summary>
            Client to translate RestRequests into Http requests and process response result
            </summary>
        </member>
        <member name="M:RestSharp.RestClient.ExecuteAsync(RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Executes the request asynchronously, authenticating if needed
            </summary>
            <param name="request">Request to be executed</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RestSharp.RestClient.DownloadStreamAsync(RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            A specialized method to download files as streams.
            </summary>
            <param name="request">Pre-configured request instance.</param>
            <param name="cancellationToken"></param>
            <returns>The downloaded stream.</returns>
        </member>
        <member name="P:RestSharp.RestClient.AcceptedContentTypes">
            <summary>
            Content types that will be sent in the Accept header. The list is populated from the known serializers.
            If you need to send something else by default, set this property to a different value.
            </summary>
        </member>
        <member name="P:RestSharp.RestClient.CalculateResponseStatus">
            <summary>
            Function to calculate the response status. By default, the status will be Completed if it was successful, or NotFound.
            </summary>
        </member>
        <member name="M:RestSharp.RestClient.#ctor">
            <summary>
            Creates an instance of RestClient using the default <see cref="T:RestSharp.RestClientOptions"/>
            </summary>
        </member>
        <member name="M:RestSharp.RestClient.#ctor(System.Uri)">
            <inheritdoc />
            <summary>
            Sets the BaseUrl property for requests made by this client instance
            </summary>
            <param name="baseUrl"></param>
        </member>
        <member name="M:RestSharp.RestClient.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Sets the BaseUrl property for requests made by this client instance
            </summary>
            <param name="baseUrl"></param>
        </member>
        <member name="M:RestSharp.RestClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            Creates a new instance of RestSharp using the message handler provided. By default, HttpClient disposes the provided handler
            when the client itself is disposed. If you want to keep the handler not disposed, set disposeHandler argument to false.
            </summary>
            <param name="handler">Message handler instance to use for HttpClient</param>
            <param name="disposeHandler">Dispose the handler when disposing RestClient, true by default</param>
        </member>
        <member name="P:RestSharp.RestClient.Authenticator">
            <summary>
            Authenticator that will be used to populate request with necessary authentication data
            </summary>
        </member>
        <member name="M:RestSharp.RestClient.AddDefaultParameter(RestSharp.Parameter)">
            <summary>
            Add a parameter to use on every request made with this client instance
            </summary>
            <param name="parameter">Parameter to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClient.UseSerializer(System.Func{RestSharp.Serializers.IRestSerializer})">
            <summary>
            Replace the default serializer with a custom one
            </summary>
            <param name="serializerFactory">Function that returns the serializer instance</param>
        </member>
        <member name="M:RestSharp.RestClient.UseSerializer``1">
            <summary>
            Replace the default serializer with a custom one
            </summary>
            <typeparam name="T">The type that implements <see cref="T:RestSharp.Serializers.IRestSerializer"/></typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.UseUrlEncoder(RestSharp.RestClient,System.Func{System.String,System.String})">
            <summary>
            Allows to use a custom way to encode URL parameters
            </summary>
            <param name="client"></param>
            <param name="encoder">A delegate to encode URL parameters</param>
            <example>client.UseUrlEncoder(s => HttpUtility.UrlEncode(s));</example>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.UseQueryEncoder(RestSharp.RestClient,System.Func{System.String,System.Text.Encoding,System.String})">
            <summary>
            Allows to use a custom way to encode query parameters
            </summary>
            <param name="client"></param>
            <param name="queryEncoder">A delegate to encode query parameters</param>
            <example>client.UseUrlEncoder((s, encoding) => HttpUtility.UrlEncode(s, encoding));</example>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddCookie(RestSharp.RestClient,System.String,System.String,System.String,System.String)">
            <summary>
            Adds cookie to the <seealso cref="T:System.Net.Http.HttpClient"/> cookie container.
            </summary>
            <param name="client"></param>
            <param name="name">Cookie name</param>
            <param name="value">Cookie value</param>
            <param name="path">Cookie path</param>
            <param name="domain">Cookie domain, must not be an empty string</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecuteGetAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Executes a GET-style request asynchronously, authenticating if needed.
            The response content then gets deserialized to T.
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Deserialized response content</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecuteGetAsync(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Executes a GET-style asynchronously, authenticating if needed
            </summary>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecutePostAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Executes a POST-style request asynchronously, authenticating if needed.
            The response content then gets deserialized to T.
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Deserialized response content</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecutePostAsync(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Executes a POST-style asynchronously, authenticating if needed
            </summary>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecutePutAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Executes a PUT-style request asynchronously, authenticating if needed.
            The response content then gets deserialized to T.
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Deserialized response content</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecutePutAsync(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Executes a PUP-style asynchronously, authenticating if needed
            </summary>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecuteAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Executes the request asynchronously, authenticating if needed
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecuteAsync(RestSharp.RestClient,RestSharp.RestRequest,RestSharp.Method,System.Threading.CancellationToken)">
            <summary>
            Executes the request asynchronously, authenticating if needed
            </summary>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="httpMethod">Override the request method</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RestSharp.RestClientExtensions.ExecuteAsync``1(RestSharp.RestClient,RestSharp.RestRequest,RestSharp.Method,System.Threading.CancellationToken)">
            <summary>
            Executes the request asynchronously, authenticating if needed
            </summary>
            <typeparam name="T">Target deserialization type</typeparam>
            <param name="client"></param>
            <param name="request">Request to be executed</param>
            <param name="httpMethod">Override the request method</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RestSharp.RestClientExtensions.GetAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Execute the request using GET HTTP method. Exception will be thrown if the request does not succeed.
            The response data is deserialized to the Data property of the returned response object.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="request">The request</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Expected result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.PostAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Execute the request using POST HTTP method. Exception will be thrown if the request does not succeed.
            The response data is deserialized to the Data property of the returned response object.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="request">The request</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Expected result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.PutAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Execute the request using PUT HTTP method. Exception will be thrown if the request does not succeed.
            The response data is deserialized to the Data property of the returned response object.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="request">The request</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Expected result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.HeadAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Execute the request using HEAD HTTP method. Exception will be thrown if the request does not succeed.
            The response data is deserialized to the Data property of the returned response object.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="request">The request</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Expected result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.OptionsAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Execute the request using OPTIONS HTTP method. Exception will be thrown if the request does not succeed.
            The response data is deserialized to the Data property of the returned response object.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="request">The request</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Expected result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.PatchAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Execute the request using PATCH HTTP method. Exception will be thrown if the request does not succeed.
            The response data is deserialized to the Data property of the returned response object.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="request">The request</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Expected result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.DeleteAsync``1(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            Execute the request using DELETE HTTP method. Exception will be thrown if the request does not succeed.
            The response data is deserialized to the Data property of the returned response object.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="request">The request</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="T">Expected result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.DownloadDataAsync(RestSharp.RestClient,RestSharp.RestRequest,System.Threading.CancellationToken)">
            <summary>
            A specialized method to download files.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="request">Pre-configured request instance.</param>
            <param name="cancellationToken"></param>
            <returns>The downloaded file.</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.StreamJsonAsync``1(RestSharp.RestClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a stream returned by the specified endpoint, deserializes each line to JSON and returns each object asynchronously.
            It is required for each JSON object to be returned in a single line.
            </summary>
            <param name="client"></param>
            <param name="resource"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.UseJson(RestSharp.RestClient)">
            <summary>
            Sets the <see cref="T:RestSharp.RestClient"/> to only use JSON
            </summary>
            <param name="client">The client instance</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.UseXml(RestSharp.RestClient)">
            <summary>
            Sets the <see cref="T:RestSharp.RestClient"/> to only use XML
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.GetJsonAsync``1(RestSharp.RestClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Calls the URL specified in the <code>resource</code> parameter, expecting a JSON response back. Deserializes and returns the response.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="resource">Resource URL</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="TResponse">Response object type</typeparam>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.PostJsonAsync``2(RestSharp.RestClient,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes the <code>request</code> object to JSON and makes a POST call to the resource specified in the <code>resource</code> parameter.
            Expects a JSON response back, deserializes it to <code>TResponse</code> type and returns it.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="resource">Resource URL</param>
            <param name="request">Request object, must be serializable to JSON</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="TRequest">Request object type</typeparam>
            <typeparam name="TResponse">Response object type</typeparam>
            <returns>Deserialized response object</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.PostJsonAsync``1(RestSharp.RestClient,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes the <code>request</code> object to JSON and makes a POST call to the resource specified in the <code>resource</code> parameter.
            Expects no response back, just the status code.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="resource">Resource URL</param>
            <param name="request">Request object, must be serializable to JSON</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="TRequest">Request object type</typeparam>
            <returns>Response status code</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.PutJsonAsync``2(RestSharp.RestClient,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes the <code>request</code> object to JSON and makes a PUT call to the resource specified in the <code>resource</code> parameter.
            Expects a JSON response back, deserializes it to <code>TResponse</code> type and returns it.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="resource">Resource URL</param>
            <param name="request">Request object, must be serializable to JSON</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="TRequest">Request object type</typeparam>
            <typeparam name="TResponse">Response object type</typeparam>
            <returns>Deserialized response object</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.PutJsonAsync``1(RestSharp.RestClient,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Serializes the <code>request</code> object to JSON and makes a PUT call to the resource specified in the <code>resource</code> parameter.
            Expects no response back, just the status code.
            </summary>
            <param name="client">RestClient instance</param>
            <param name="resource">Resource URL</param>
            <param name="request">Request object, must be serializable to JSON</param>
            <param name="cancellationToken">Cancellation token</param>
            <typeparam name="TRequest">Request object type</typeparam>
            <returns>Response status code</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultParameter(RestSharp.RestClient,System.String,System.String)">
            <summary>
            Adds a default HTTP parameter (QueryString for GET, DELETE, OPTIONS and HEAD; Encoded form for POST and PUT)
            Used on every request made by this client instance
            </summary>
            <param name="client"><see cref="T:RestSharp.RestClientOptions"/> instance</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultParameter(RestSharp.RestClient,System.String,System.Object,RestSharp.ParameterType)">
            <summary>
            Adds a default parameter to the client options. There are four types of parameters:
            - GetOrPost: Either a QueryString value or encoded form value based on method
            - HttpHeader: Adds the name/value pair to the HTTP request's Headers collection
            - UrlSegment: Inserted into URL if there is a matching url token e.g. {AccountId}
            - RequestBody: Used by AddBody() (not recommended to use directly)
            Used on every request made by this client instance
            </summary>
            <param name="client"><see cref="T:RestSharp.RestClientOptions"/> instance</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="type">The type of parameter to add</param>
            <returns>This request</returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultHeader(RestSharp.RestClient,System.String,System.String)">
            <summary>
            Adds a default header to the RestClient. Used on every request made by this client instance.
            </summary>
            <param name="client"><see cref="T:RestSharp.RestClientOptions"/> instance</param>
            <param name="name">Name of the header to add</param>
            <param name="value">Value of the header to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultHeaders(RestSharp.RestClient,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds default headers to the RestClient. Used on every request made by this client instance.
            </summary>
            <param name="client"><see cref="T:RestSharp.RestClientOptions"/> instance</param>
            <param name="headers">Dictionary containing the Names and Values of the headers to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultUrlSegment(RestSharp.RestClient,System.String,System.String)">
            <summary>
            Adds a default URL segment parameter to the RestClient. Used on every request made by this client instance.
            </summary>
            <param name="client"><see cref="T:RestSharp.RestClientOptions"/> instance</param>
            <param name="name">Name of the segment to add</param>
            <param name="value">Value of the segment to add</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.RestClientExtensions.AddDefaultQueryParameter(RestSharp.RestClient,System.String,System.String)">
            <summary>
            Adds a default URL query parameter to the RestClient. Used on every request made by this client instance.
            </summary>
            <param name="client"><see cref="T:RestSharp.RestClientOptions"/> instance</param>
            <param name="name">Name of the query parameter to add</param>
            <param name="value">Value of the query parameter to add</param>
            <returns></returns>
        </member>
        <member name="P:RestSharp.RestClientOptions.BaseUrl">
            <summary>
            Explicit Host header value to use in requests independent from the request URI.
            If null, default host value extracted from URI is used.
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.Credentials">
            <summary>
            In general you would not need to set this directly. Used by the NtlmAuthenticator.
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.UseDefaultCredentials">
            <summary>
            Determine whether or not the "default credentials" (e.g. the user account under which the current process is
            running) will be sent along to the server. The default is false.
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.DisableCharset">
            <summary>
            Set to true if you need the Content-Type not to have the charset 
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.ClientCertificates">
            <summary>
            X509CertificateCollection to be sent with request
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.PreAuthenticate">
            <summary>
            Flag to send authorisation header with the HttpWebRequest
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.ThrowOnDeserializationError">
            <summary>
            Modifies the default behavior of RestSharp to swallow exceptions.
            When set to <code>true</code>, a <see cref="T:RestSharp.DeserializationException"/> will be thrown
            in case RestSharp fails to deserialize the response.
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.FailOnDeserializationError">
            <summary>
            Modifies the default behavior of RestSharp to swallow exceptions.
            When set to <code>true</code>, RestSharp will consider the request as unsuccessful
            in case it fails to deserialize the response.
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.ThrowOnAnyError">
            <summary>
            Modifies the default behavior of RestSharp to swallow exceptions.
            When set to <code>true</code>, exceptions will be re-thrown.
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.RemoteCertificateValidationCallback">
            <summary>
            Callback function for handling the validation of remote certificates. Useful for certificate pinning and
            overriding certificate errors in the scope of a request.
            </summary>
        </member>
        <member name="P:RestSharp.RestClientOptions.AllowMultipleDefaultParametersWithSameName">
            <summary>
            By default, RestSharp doesn't allow multiple parameters to have the same name.
            This properly allows to override the default behavior.
            </summary>
        </member>
        <member name="M:RestSharp.Serializers.Json.RestClientExtensions.UseSystemTextJson(RestSharp.RestClient)">
            <summary>
            Use System.Text.Json serializer with default settings
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Serializers.Json.RestClientExtensions.UseSystemTextJson(RestSharp.RestClient,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Use System.Text.Json serializer with custom settings
            </summary>
            <param name="client"></param>
            <param name="options">System.Text.Json serializer options</param>
            <returns></returns>
        </member>
        <member name="M:RestSharp.Serializers.Json.SystemTextJsonSerializer.#ctor">
            <summary>
            Create the new serializer that uses System.Text.Json.JsonSerializer with default settings
            </summary>
        </member>
        <member name="M:RestSharp.Serializers.Json.SystemTextJsonSerializer.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create the new serializer that uses System.Text.Json.JsonSerializer with custom settings
            </summary>
            <param name="options">Json serializer settings</param>
        </member>
        <member name="T:RestSharp.Serializers.Xml.DotNetXmlDeserializer">
            <summary>
            Wrapper for System.Xml.Serialization.XmlSerializer.
            </summary>
        </member>
        <member name="P:RestSharp.Serializers.Xml.DotNetXmlDeserializer.Encoding">
            <summary>
            Encoding for serialized content
            </summary>
        </member>
        <member name="P:RestSharp.Serializers.Xml.DotNetXmlDeserializer.RootElement">
            <summary>
            Name of the root element to use when serializing
            </summary>
        </member>
        <member name="P:RestSharp.Serializers.Xml.DotNetXmlDeserializer.Namespace">
            <summary>
            XML namespace to use when serializing
            </summary>
        </member>
        <member name="T:RestSharp.Serializers.Xml.DotNetXmlSerializer">
            <summary>
            Wrapper for System.Xml.Serialization.XmlSerializer.
            </summary>
        </member>
        <member name="M:RestSharp.Serializers.Xml.DotNetXmlSerializer.#ctor">
            <summary>
            Default constructor, does not specify namespace
            </summary>
        </member>
        <member name="M:RestSharp.Serializers.Xml.DotNetXmlSerializer.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Specify the namespaced to be used when serializing
            </summary>
            <param name="namespace">XML namespace</param>
        </member>
        <member name="P:RestSharp.Serializers.Xml.DotNetXmlSerializer.Encoding">
            <summary>
            Encoding for serialized content
            </summary>
        </member>
        <member name="M:RestSharp.Serializers.Xml.DotNetXmlSerializer.Serialize(System.Object)">
            <summary>
            Serialize the object as XML
            </summary>
            <param name="obj">Object to serialize</param>
            <returns>XML as string</returns>
        </member>
        <member name="P:RestSharp.Serializers.Xml.DotNetXmlSerializer.RootElement">
            <summary>
            Name of the root element to use when serializing
            </summary>
        </member>
        <member name="P:RestSharp.Serializers.Xml.DotNetXmlSerializer.Namespace">
            <summary>
            XML namespace to use when serializing
            </summary>
        </member>
        <member name="P:RestSharp.Serializers.Xml.DotNetXmlSerializer.DateFormat">
            <summary>
            Format string to use when serializing dates
            </summary>
        </member>
        <member name="P:RestSharp.Serializers.Xml.DotNetXmlSerializer.ContentType">
            <summary>
            Content type for serialized content
            </summary>
        </member>
    </members>
</doc>
